{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview An extensive but easy to use JavaScript API for Minecraft 1.12.2. Currently only featured in Oreo Client ( link ) made by anthonyj, Trol and tubz. In order to take full advantage of OreoScript, you should already have a decent understanding of Minecraft and its codebase. Script data In order for your script to be properly loaded, you need to have an object named data. It must include the name of your script, a brief description and, optionally, the name of your main function. var data = { name : \"My script\" , description : \"Gives you superpowers!\" , main : \"main\" } //Ran when the script is loaded (not toggled) function main () { } Event callbacks There are several events that you can take advantage of within OreoScript. This is done by defining a function with the corresponding name. A more detailed explanation, as well as a list of all existing events can be found here . //Called when the heads up display is rendered function onHudRender ( event ) { } //Called both before and after the local player updates function onPlayerUpdate ( event ) { }","title":"Home"},{"location":"#overview","text":"An extensive but easy to use JavaScript API for Minecraft 1.12.2. Currently only featured in Oreo Client ( link ) made by anthonyj, Trol and tubz. In order to take full advantage of OreoScript, you should already have a decent understanding of Minecraft and its codebase.","title":"Overview"},{"location":"#script-data","text":"In order for your script to be properly loaded, you need to have an object named data. It must include the name of your script, a brief description and, optionally, the name of your main function. var data = { name : \"My script\" , description : \"Gives you superpowers!\" , main : \"main\" } //Ran when the script is loaded (not toggled) function main () { }","title":"Script data"},{"location":"#event-callbacks","text":"There are several events that you can take advantage of within OreoScript. This is done by defining a function with the corresponding name. A more detailed explanation, as well as a list of all existing events can be found here . //Called when the heads up display is rendered function onHudRender ( event ) { } //Called both before and after the local player updates function onPlayerUpdate ( event ) { }","title":"Event callbacks"},{"location":"bind/","text":"Prefix bind.* Functions isKeyDown(keyCode) (boolean) Returns whether or not a key is pressed down","title":"Bind"},{"location":"bind/#prefix","text":"bind.*","title":"Prefix"},{"location":"bind/#functions","text":"","title":"Functions"},{"location":"bind/#iskeydownkeycode-boolean","text":"Returns whether or not a key is pressed down","title":"isKeyDown(keyCode) (boolean)"},{"location":"container/","text":"Prefix container.* Functions isInContainer() (boolean) Returns whether or not a container is open getType() (int) Returns the current containers type Container types ------------------ Chest: 0 Enchantment: 1 Hopper: 2 Merchant: 3 Repair: 4 Beacon: 5 Brewing: 6 Crafting: 7 Dispenser: 8 Furnace: 9 Horse Inventory: 10 Inventory: 11 getWindowId() (int) Returns the current container id (-1 if not in a container) getChestName() (String) Returns the name of the current chest (empty string if the container isn't a chest) getChestDisplayName() (String) Returns the display name of the current chest (empty string if the container isn't a chest) getSize() (int) Returns the total number of slots in the current container (-1 if not in a container) getStackInSlot(slot) ( ItemStack ) Returns the stack in the specified slot (null if not in a container) clickSlot(slot, mouseButton, clickType) (void) Clicks a slot in the current container Mouse Button -------------- Left : 0 Right : 1 Click type -------------- Pickup : 0 Quick move : 1 Swap : 2 Clone : 4 Throw : 5 Quick craft : 6 Pickup all : 7","title":"Container"},{"location":"container/#prefix","text":"container.*","title":"Prefix"},{"location":"container/#functions","text":"","title":"Functions"},{"location":"container/#isincontainer-boolean","text":"Returns whether or not a container is open","title":"isInContainer() (boolean)"},{"location":"container/#gettype-int","text":"Returns the current containers type Container types ------------------ Chest: 0 Enchantment: 1 Hopper: 2 Merchant: 3 Repair: 4 Beacon: 5 Brewing: 6 Crafting: 7 Dispenser: 8 Furnace: 9 Horse Inventory: 10 Inventory: 11","title":"getType() (int)"},{"location":"container/#getwindowid-int","text":"Returns the current container id (-1 if not in a container)","title":"getWindowId() (int)"},{"location":"container/#getchestname-string","text":"Returns the name of the current chest (empty string if the container isn't a chest)","title":"getChestName() (String)"},{"location":"container/#getchestdisplayname-string","text":"Returns the display name of the current chest (empty string if the container isn't a chest)","title":"getChestDisplayName() (String)"},{"location":"container/#getsize-int","text":"Returns the total number of slots in the current container (-1 if not in a container)","title":"getSize() (int)"},{"location":"container/#getstackinslotslot-itemstack","text":"Returns the stack in the specified slot (null if not in a container)","title":"getStackInSlot(slot) (ItemStack)"},{"location":"container/#clickslotslot-mousebutton-clicktype-void","text":"Clicks a slot in the current container Mouse Button -------------- Left : 0 Right : 1 Click type -------------- Pickup : 0 Quick move : 1 Swap : 2 Clone : 4 Throw : 5 Quick craft : 6 Pickup all : 7","title":"clickSlot(slot, mouseButton, clickType) (void)"},{"location":"entity/","text":"Prefix .* Examples Loop through entity list var entityList = world . getLivingEntities (); for ( var i = 0 ; i < entityList . size (); i ++ ) { var entityId = entityList . get ( i ); //use functions documented below } Functions isLiving(id) (boolean) Returns whether or not the entity is a living entity isPlayer(id) (boolean) Returns whether or not the entity is a player isLocalPlayer(id) (boolean) Returns whether or not the entity is the local player getName(id) (String) Returns the entities name getDisplayName(id) (String) Returns the entities displayname getHealth(id) (int) Returns the entities health getArmor(id) (int) Returns the entities armor getEyeHeight(id) (double) Returns the entities eye height getPosition(id) ( Vector3d ) Returns the entities position getLastPosition(id) ( Vector3d ) Returns the entities last tick position getPositionDelta(id) ( Vector3d ) Returns the difference between the entities current tick position and last tick position getEyePosition(id) ( Vector3d ) Retismt je entities eye position getMotion(id) ( Vector3d ) Returns the entities motion getBoundingBox(id) ( BoundingBox ) Returns the entities bounding box getCollisionBoundingBox(id) ( BoundingBox ) Returns the entities collision box getDistanceFromPlayer(id) (double) Returns the entities distance from the local player isInvisible(id) (boolean) Returns whether or not the entity is invisible isInvisibleToPlayer(id) (boolean) Returns whether or not the entity is invisible to only the local player isInvulnerable(id) (boolean) Returns whether or not the entity is invulnerable isAlive(id) (boolean) Returns whether or not the entity is alive canBeSeen(id) (boolean) Returns whether or not the entity is behind blocks and cannot be seen by the local player predictPlayerPosition(id, ticks) ( Vector3d ) Predicts and returns the entities position after a certain amount of ticks rayCast(id, distance, yaw, pitch) (boolean) Returs whether or not the local player would be looking at an entity with a yaw and pitch","title":"Entity"},{"location":"entity/#prefix","text":".*","title":"Prefix"},{"location":"entity/#examples","text":"","title":"Examples"},{"location":"entity/#loop-through-entity-list","text":"var entityList = world . getLivingEntities (); for ( var i = 0 ; i < entityList . size (); i ++ ) { var entityId = entityList . get ( i ); //use functions documented below }","title":"Loop through entity list"},{"location":"entity/#functions","text":"","title":"Functions"},{"location":"entity/#islivingid-boolean","text":"Returns whether or not the entity is a living entity","title":"isLiving(id) (boolean)"},{"location":"entity/#isplayerid-boolean","text":"Returns whether or not the entity is a player","title":"isPlayer(id) (boolean)"},{"location":"entity/#islocalplayerid-boolean","text":"Returns whether or not the entity is the local player","title":"isLocalPlayer(id) (boolean)"},{"location":"entity/#getnameid-string","text":"Returns the entities name","title":"getName(id) (String)"},{"location":"entity/#getdisplaynameid-string","text":"Returns the entities displayname","title":"getDisplayName(id) (String)"},{"location":"entity/#gethealthid-int","text":"Returns the entities health","title":"getHealth(id) (int)"},{"location":"entity/#getarmorid-int","text":"Returns the entities armor","title":"getArmor(id) (int)"},{"location":"entity/#geteyeheightid-double","text":"Returns the entities eye height","title":"getEyeHeight(id) (double)"},{"location":"entity/#getpositionid-vector3d","text":"Returns the entities position","title":"getPosition(id) (Vector3d)"},{"location":"entity/#getlastpositionid-vector3d","text":"Returns the entities last tick position","title":"getLastPosition(id) (Vector3d)"},{"location":"entity/#getpositiondeltaid-vector3d","text":"Returns the difference between the entities current tick position and last tick position","title":"getPositionDelta(id) (Vector3d)"},{"location":"entity/#geteyepositionid-vector3d","text":"Retismt je entities eye position","title":"getEyePosition(id) (Vector3d)"},{"location":"entity/#getmotionid-vector3d","text":"Returns the entities motion","title":"getMotion(id) (Vector3d)"},{"location":"entity/#getboundingboxid-boundingbox","text":"Returns the entities bounding box","title":"getBoundingBox(id) (BoundingBox)"},{"location":"entity/#getcollisionboundingboxid-boundingbox","text":"Returns the entities collision box","title":"getCollisionBoundingBox(id) (BoundingBox)"},{"location":"entity/#getdistancefromplayerid-double","text":"Returns the entities distance from the local player","title":"getDistanceFromPlayer(id) (double)"},{"location":"entity/#isinvisibleid-boolean","text":"Returns whether or not the entity is invisible","title":"isInvisible(id) (boolean)"},{"location":"entity/#isinvisibletoplayerid-boolean","text":"Returns whether or not the entity is invisible to only the local player","title":"isInvisibleToPlayer(id) (boolean)"},{"location":"entity/#isinvulnerableid-boolean","text":"Returns whether or not the entity is invulnerable","title":"isInvulnerable(id) (boolean)"},{"location":"entity/#isaliveid-boolean","text":"Returns whether or not the entity is alive","title":"isAlive(id) (boolean)"},{"location":"entity/#canbeseenid-boolean","text":"Returns whether or not the entity is behind blocks and cannot be seen by the local player","title":"canBeSeen(id) (boolean)"},{"location":"entity/#predictplayerpositionid-ticks-vector3d","text":"Predicts and returns the entities position after a certain amount of ticks","title":"predictPlayerPosition(id, ticks) (Vector3d)"},{"location":"entity/#raycastid-distance-yaw-pitch-boolean","text":"Returs whether or not the local player would be looking at an entity with a yaw and pitch","title":"rayCast(id, distance, yaw, pitch) (boolean)"},{"location":"events/","text":"Event Everything contained in Event exists for all other events. Methods : - getContext () : Returns an EventContext - getContextId () : Returns 0 ( pre ) or 1 ( post ) - isCancelled () : Returns whether or not the event is cancelled - setCancelled ( boolean ) : Sets whether or not the event is cancelled EventPlayerUpdate Called before and after the local player updates. Pre / Post : Both Cancellable : No Fields : - double : posX - double : posY - double : posZ - double : motX - double : motY - double : motZ - float : rotYaw - float : rotPitch - boolean : sneaking - boolean : sprinting - boolean : ground EventLivingDeath Called whenever a living entity dies. Pre / Post : Post Cancellable : No Fields : - int : entityId EventKeyPress Called whenever a key is pressed in-game Pre / Post : Pre Cancellable : Yes Fields : - int : keyCode EventMouseInput Called whenever a mouse button is clicked or released Pre / Post : Pre Cancellable : Yes Fields : - int : mouseState - int : mouseButton EventHudRender Called after the hud is rendered Pre / Post : Post Cancellable : No Fields : - none EventWorldRender Called after entites are rendered Pre / Post : Post Cancellable : No Fields : - none","title":"Events"},{"location":"events/#event","text":"Everything contained in Event exists for all other events. Methods : - getContext () : Returns an EventContext - getContextId () : Returns 0 ( pre ) or 1 ( post ) - isCancelled () : Returns whether or not the event is cancelled - setCancelled ( boolean ) : Sets whether or not the event is cancelled","title":"Event"},{"location":"events/#_1","text":"","title":""},{"location":"events/#eventplayerupdate","text":"Called before and after the local player updates. Pre / Post : Both Cancellable : No Fields : - double : posX - double : posY - double : posZ - double : motX - double : motY - double : motZ - float : rotYaw - float : rotPitch - boolean : sneaking - boolean : sprinting - boolean : ground","title":"EventPlayerUpdate"},{"location":"events/#_2","text":"","title":""},{"location":"events/#eventlivingdeath","text":"Called whenever a living entity dies. Pre / Post : Post Cancellable : No Fields : - int : entityId","title":"EventLivingDeath"},{"location":"events/#_3","text":"","title":""},{"location":"events/#eventkeypress","text":"Called whenever a key is pressed in-game Pre / Post : Pre Cancellable : Yes Fields : - int : keyCode","title":"EventKeyPress"},{"location":"events/#_4","text":"","title":""},{"location":"events/#eventmouseinput","text":"Called whenever a mouse button is clicked or released Pre / Post : Pre Cancellable : Yes Fields : - int : mouseState - int : mouseButton","title":"EventMouseInput"},{"location":"events/#_5","text":"","title":""},{"location":"events/#eventhudrender","text":"Called after the hud is rendered Pre / Post : Post Cancellable : No Fields : - none","title":"EventHudRender"},{"location":"events/#_6","text":"","title":""},{"location":"events/#eventworldrender","text":"Called after entites are rendered Pre / Post : Post Cancellable : No Fields : - none","title":"EventWorldRender"},{"location":"font/","text":"Prefix font.* Funtions getNativeFont(fontName, size) (int) Returns the id of the specified native font drawString(fontId, text, x, y, r, g, b, a) (void) Draws text on the screen drawStringWithShadow(fontId, text, x, y, r, g, b, a) (void) Draws text with a shadow on the screen drawCenteredString(fontId, text, x, y, r, g, b, a) (void) Draws centered text on the screen getStringWidth(fontId, text) (int) Returns the width of the given string getStringHeight(fontId, text) (int) Returns the height of the given string","title":"Font"},{"location":"font/#prefix","text":"font.*","title":"Prefix"},{"location":"font/#funtions","text":"","title":"Funtions"},{"location":"font/#getnativefontfontname-size-int","text":"Returns the id of the specified native font","title":"getNativeFont(fontName, size) (int)"},{"location":"font/#drawstringfontid-text-x-y-r-g-b-a-void","text":"Draws text on the screen","title":"drawString(fontId, text, x, y, r, g, b, a) (void)"},{"location":"font/#drawstringwithshadowfontid-text-x-y-r-g-b-a-void","text":"Draws text with a shadow on the screen","title":"drawStringWithShadow(fontId, text, x, y, r, g, b, a) (void)"},{"location":"font/#drawcenteredstringfontid-text-x-y-r-g-b-a-void","text":"Draws centered text on the screen","title":"drawCenteredString(fontId, text, x, y, r, g, b, a) (void)"},{"location":"font/#getstringwidthfontid-text-int","text":"Returns the width of the given string","title":"getStringWidth(fontId, text) (int)"},{"location":"font/#getstringheightfontid-text-int","text":"Returns the height of the given string","title":"getStringHeight(fontId, text) (int)"},{"location":"game/","text":"Prefix game.* Functions getCurrentTimeMs() (long) Returns the current system time in milliseconds printToChat(message) (void) Prints a client sided message to chat isInGame() (boolean) Returns whether or not you are in a world getScreenDimensions() ( Vector2i ) Returns the dimensions of the games window getScaledScreenDimensions() ( Vector2i ) Returns the dimensions of the games window after gui scaling","title":"Game"},{"location":"game/#prefix","text":"game.*","title":"Prefix"},{"location":"game/#functions","text":"","title":"Functions"},{"location":"game/#getcurrenttimems-long","text":"Returns the current system time in milliseconds","title":"getCurrentTimeMs() (long)"},{"location":"game/#printtochatmessage-void","text":"Prints a client sided message to chat","title":"printToChat(message) (void)"},{"location":"game/#isingame-boolean","text":"Returns whether or not you are in a world","title":"isInGame() (boolean)"},{"location":"game/#getscreendimensions-vector2i","text":"Returns the dimensions of the games window","title":"getScreenDimensions() (Vector2i)"},{"location":"game/#getscaledscreendimensions-vector2i","text":"Returns the dimensions of the games window after gui scaling","title":"getScaledScreenDimensions() (Vector2i)"},{"location":"localplayer/","text":"Prefix player.* Functions getEntityId() (int) Returns the local players entity id getName() (String) Returns the local players ingame name getPosition() ( Vector3d ) Returns the local players position getEyePosition() ( Vector3d ) Returns the local players eye position setPosition(x, y, z) (void) Sets the players position getMotion() ( Vector3d ) Returns the local players motion setMotion(x, y, z) (void) Sets the local players motion getRotations() ( Vector2f ) Returns the local players pitch and yaw getRotationsToPosition(x, y, z) ( Vector2f ) Returns the required pitch and yaw for the local player to be looking at a position getRotationsToPositionFromPosition(toX, toY, toZ, fromX, fromY, fromZ) ( Vector2f ) Returns the required pitch and yaw for the local player to be looking at a position from a position setRotations(yaw, pitch) Sets the local players pitch and yaw leftClick() (void) Left clicks the mouse rightClick() (void) Right clicks the mouse getHotbarSlot() (int) Returns the current selected hotbar slot setHotbarSlot(slot) (void) Sets the current selected hotbar slot. Slot index must be from 0-8 sendMessage(message) (void) Sends a message in chat openInventory() (void) Opens the local players inventory isInInventory() (boolean) Returns whether or not the local players inventory is open","title":"Local Player"},{"location":"localplayer/#prefix","text":"player.*","title":"Prefix"},{"location":"localplayer/#functions","text":"","title":"Functions"},{"location":"localplayer/#getentityid-int","text":"Returns the local players entity id","title":"getEntityId() (int)"},{"location":"localplayer/#getname-string","text":"Returns the local players ingame name","title":"getName() (String)"},{"location":"localplayer/#getposition-vector3d","text":"Returns the local players position","title":"getPosition() (Vector3d)"},{"location":"localplayer/#geteyeposition-vector3d","text":"Returns the local players eye position","title":"getEyePosition() (Vector3d)"},{"location":"localplayer/#setpositionx-y-z-void","text":"Sets the players position","title":"setPosition(x, y, z) (void)"},{"location":"localplayer/#getmotion-vector3d","text":"Returns the local players motion","title":"getMotion() (Vector3d)"},{"location":"localplayer/#setmotionx-y-z-void","text":"Sets the local players motion","title":"setMotion(x, y, z) (void)"},{"location":"localplayer/#getrotations-vector2f","text":"Returns the local players pitch and yaw","title":"getRotations() (Vector2f)"},{"location":"localplayer/#getrotationstopositionx-y-z-vector2f","text":"Returns the required pitch and yaw for the local player to be looking at a position","title":"getRotationsToPosition(x, y, z) (Vector2f)"},{"location":"localplayer/#getrotationstopositionfrompositiontox-toy-toz-fromx-fromy-fromz-vector2f","text":"Returns the required pitch and yaw for the local player to be looking at a position from a position","title":"getRotationsToPositionFromPosition(toX, toY, toZ, fromX, fromY, fromZ) (Vector2f)"},{"location":"localplayer/#setrotationsyaw-pitch","text":"Sets the local players pitch and yaw","title":"setRotations(yaw, pitch)"},{"location":"localplayer/#leftclick-void","text":"Left clicks the mouse","title":"leftClick() (void)"},{"location":"localplayer/#rightclick-void","text":"Right clicks the mouse","title":"rightClick() (void)"},{"location":"localplayer/#gethotbarslot-int","text":"Returns the current selected hotbar slot","title":"getHotbarSlot() (int)"},{"location":"localplayer/#sethotbarslotslot-void","text":"Sets the current selected hotbar slot. Slot index must be from 0-8","title":"setHotbarSlot(slot) (void)"},{"location":"localplayer/#sendmessagemessage-void","text":"Sends a message in chat","title":"sendMessage(message) (void)"},{"location":"localplayer/#openinventory-void","text":"Opens the local players inventory","title":"openInventory() (void)"},{"location":"localplayer/#isininventory-boolean","text":"Returns whether or not the local players inventory is open","title":"isInInventory() (boolean)"},{"location":"options/","text":"Prefix options.* Functions addBoolean(name) (void) Adds a boolean option to your script getBoolean(name) (boolean) Returns the value of the boolean option addInt(name, minimum, maximum, increment) (void) Adds a int option to your script getInt(name) Retusnt the value of the int option","title":"Options"},{"location":"options/#prefix","text":"options.*","title":"Prefix"},{"location":"options/#functions","text":"","title":"Functions"},{"location":"options/#addbooleanname-void","text":"Adds a boolean option to your script","title":"addBoolean(name) (void)"},{"location":"options/#getbooleanname-boolean","text":"Returns the value of the boolean option","title":"getBoolean(name) (boolean)"},{"location":"options/#addintname-minimum-maximum-increment-void","text":"Adds a int option to your script","title":"addInt(name, minimum, maximum, increment) (void)"},{"location":"options/#getintname","text":"Retusnt the value of the int option","title":"getInt(name)"},{"location":"render/","text":"Prefix render.* Functions drawRectangle(x, y, width, height, r, g, b, a) Draws a rectangle on the screen drawRectangleBorder(x, y, width, height, r, g, b, a) Draws a hollow rectangle on the screen setupOverlayRendering() (void) Sets up overlay rendering setupCameraTransform() (void) Sets up camera transform orientCamera() (void) Sets up the players eye or camera worldToScreen(x, y, z) ( Vector3d ) Converts a point on the world to a point on the screen getRenderPosition() ( Vector3d ) Returns the render manager positions","title":"Render"},{"location":"render/#prefix","text":"render.*","title":"Prefix"},{"location":"render/#functions","text":"","title":"Functions"},{"location":"render/#drawrectanglex-y-width-height-r-g-b-a","text":"Draws a rectangle on the screen","title":"drawRectangle(x, y, width, height, r, g, b, a)"},{"location":"render/#drawrectangleborderx-y-width-height-r-g-b-a","text":"Draws a hollow rectangle on the screen","title":"drawRectangleBorder(x, y, width, height, r, g, b, a)"},{"location":"render/#setupoverlayrendering-void","text":"Sets up overlay rendering","title":"setupOverlayRendering() (void)"},{"location":"render/#setupcameratransform-void","text":"Sets up camera transform","title":"setupCameraTransform() (void)"},{"location":"render/#orientcamera-void","text":"Sets up the players eye or camera","title":"orientCamera() (void)"},{"location":"render/#worldtoscreenx-y-z-vector3d","text":"Converts a point on the world to a point on the screen","title":"worldToScreen(x, y, z) (Vector3d)"},{"location":"render/#getrenderposition-vector3d","text":"Returns the render manager positions","title":"getRenderPosition() (Vector3d)"},{"location":"server/","text":"Prefix server.* Functions getIpAddress() (String) Returns the current server ip getLatency() (int) Returns the latency between the current server and the client getScoreboardLines() ( ArrayList ) Returns a list of all scoreboard lines","title":"Server"},{"location":"server/#prefix","text":"server.*","title":"Prefix"},{"location":"server/#functions","text":"","title":"Functions"},{"location":"server/#getipaddress-string","text":"Returns the current server ip","title":"getIpAddress() (String)"},{"location":"server/#getlatency-int","text":"Returns the latency between the current server and the client","title":"getLatency() (int)"},{"location":"server/#getscoreboardlines-arraylist","text":"Returns a list of all scoreboard lines","title":"getScoreboardLines() (ArrayList)"},{"location":"world/","text":"Prefix world.* Functions getLivingEntities() ( ArrayList ) Sets the game timer speed","title":"World"},{"location":"world/#prefix","text":"world.*","title":"Prefix"},{"location":"world/#functions","text":"","title":"Functions"},{"location":"world/#getlivingentities-arraylist","text":"Sets the game timer speed","title":"getLivingEntities() (ArrayList)"},{"location":"classes/BoundingBox/","text":"Functions getMins() ( Vector3d ) Returns a vector containing the minimum for each axis getMaxs() ( Vector3d ) Returns a vector containing the maximum for each axis getMinX() (double) Returns minx getMinY() (double) Returns miny getMinZ() (double) Returns minz getMaxX() (double) Returns maxx getMaxY() (double) Returns maxy getMaxZ() (double) Returns maxz","title":"BoudingBox"},{"location":"classes/BoundingBox/#functions","text":"","title":"Functions"},{"location":"classes/BoundingBox/#getmins-vector3d","text":"Returns a vector containing the minimum for each axis","title":"getMins() (Vector3d)"},{"location":"classes/BoundingBox/#getmaxs-vector3d","text":"Returns a vector containing the maximum for each axis","title":"getMaxs() (Vector3d)"},{"location":"classes/BoundingBox/#getminx-double","text":"Returns minx","title":"getMinX() (double)"},{"location":"classes/BoundingBox/#getminy-double","text":"Returns miny","title":"getMinY() (double)"},{"location":"classes/BoundingBox/#getminz-double","text":"Returns minz","title":"getMinZ() (double)"},{"location":"classes/BoundingBox/#getmaxx-double","text":"Returns maxx","title":"getMaxX() (double)"},{"location":"classes/BoundingBox/#getmaxy-double","text":"Returns maxy","title":"getMaxY() (double)"},{"location":"classes/BoundingBox/#getmaxz-double","text":"Returns maxz","title":"getMaxZ() (double)"},{"location":"classes/ItemStack/","text":"Functions getTranslationKey() (String) Returns the items translation key getDisplayName() (String) Returns the items display name getSize() (int) Returns the number of items in the stack getMaxSize() (int) Returns the maximum size of the stack getDamage() (int) Returns the damage done to the stack","title":"ItemStack"},{"location":"classes/ItemStack/#functions","text":"","title":"Functions"},{"location":"classes/ItemStack/#gettranslationkey-string","text":"Returns the items translation key","title":"getTranslationKey() (String)"},{"location":"classes/ItemStack/#getdisplayname-string","text":"Returns the items display name","title":"getDisplayName() (String)"},{"location":"classes/ItemStack/#getsize-int","text":"Returns the number of items in the stack","title":"getSize() (int)"},{"location":"classes/ItemStack/#getmaxsize-int","text":"Returns the maximum size of the stack","title":"getMaxSize() (int)"},{"location":"classes/ItemStack/#getdamage-int","text":"Returns the damage done to the stack","title":"getDamage() (int)"},{"location":"classes/Vector2f/","text":"Fields x (float) y (float)","title":"Vector2f"},{"location":"classes/Vector2f/#fields","text":"","title":"Fields"},{"location":"classes/Vector2f/#x-float","text":"","title":"x (float)"},{"location":"classes/Vector2f/#y-float","text":"","title":"y (float)"},{"location":"classes/Vector3d/","text":"Fields x (double) y (double) z (double)","title":"Vector3d"},{"location":"classes/Vector3d/#fields","text":"","title":"Fields"},{"location":"classes/Vector3d/#x-double","text":"","title":"x (double)"},{"location":"classes/Vector3d/#y-double","text":"","title":"y (double)"},{"location":"classes/Vector3d/#z-double","text":"","title":"z (double)"}]}